#!/bin/bash

# Setup Workload Identity Federation with Microsoft Entra for Cloud Run
# This works WITHOUT requiring a Google Cloud Organization

set -e

# Configuration
PROJECT_ID=${GCP_PROJECT_ID:-"newsletter-1757943207"}
REGION=${GCP_REGION:-"europe-west1"}
SERVICE_NAME="catalyst-newsletter"
POOL_ID=${WIF_POOL_ID:-"microsoft-entra-pool"}
PROVIDER_ID=${WIF_PROVIDER_ID:-"microsoft-entra"}

# Microsoft Entra configuration
TENANT_ID=${AZURE_TENANT_ID:-"YOUR_TENANT_ID"}
CLIENT_ID=${AZURE_CLIENT_ID:-"eff0e78f-446e-47a9-af65-829e10ac0690"}

echo "🔐 Workload Identity Federation with Microsoft Entra"
echo "===================================================="
echo "✅ Works WITHOUT Google Cloud Organization"
echo ""
echo "Project: $PROJECT_ID"
echo "Pool ID: $POOL_ID"
echo "Azure Tenant: $TENANT_ID"
echo "Azure Client: $CLIENT_ID"
echo ""

# Set project
gcloud config set project $PROJECT_ID

# Step 1: Enable required APIs
echo "1️⃣ Enabling required APIs..."
gcloud services enable \
  iam.googleapis.com \
  iamcredentials.googleapis.com \
  sts.googleapis.com \
  cloudresourcemanager.googleapis.com

# Step 2: Create Workload Identity Pool (not Workforce)
echo ""
echo "2️⃣ Creating Workload Identity Pool..."
gcloud iam workload-identity-pools create $POOL_ID \
  --location="global" \
  --display-name="Microsoft Entra ID Pool" \
  --description="Federation with Microsoft Entra ID" \
  || echo "Pool already exists"

# Get pool full name
PROJECT_NUMBER=$(gcloud projects describe $PROJECT_ID --format="value(projectNumber)")
POOL_NAME="projects/$PROJECT_NUMBER/locations/global/workloadIdentityPools/$POOL_ID"

# Step 3: Create OIDC Provider
echo ""
echo "3️⃣ Creating OIDC Provider for Microsoft Entra..."
gcloud iam workload-identity-pools providers create-oidc $PROVIDER_ID \
  --location="global" \
  --workload-identity-pool=$POOL_ID \
  --issuer-uri="https://login.microsoftonline.com/$TENANT_ID/v2.0" \
  --allowed-audiences=$CLIENT_ID \
  --attribute-mapping="google.subject=assertion.sub,attribute.email=assertion.email,attribute.name=assertion.name" \
  || echo "Provider already exists"

# Step 4: Create Service Account for the workload
SA_NAME="microsoft-entra-sa"
SA_EMAIL="${SA_NAME}@${PROJECT_ID}.iam.gserviceaccount.com"

echo ""
echo "4️⃣ Creating Service Account..."
gcloud iam service-accounts create $SA_NAME \
  --display-name="Microsoft Entra Service Account" \
  --description="Service account for Microsoft Entra federated access" \
  || echo "Service account already exists"

# Step 5: Grant Service Account access to Cloud Run
echo ""
echo "5️⃣ Granting Service Account access to Cloud Run..."
gcloud run services add-iam-policy-binding $SERVICE_NAME \
  --region=$REGION \
  --member="serviceAccount:$SA_EMAIL" \
  --role="roles/run.invoker"

# Step 6: Allow workload identity pool to impersonate service account
echo ""
echo "6️⃣ Configuring workload identity binding..."
gcloud iam service-accounts add-iam-policy-binding $SA_EMAIL \
  --member="principalSet://iam.googleapis.com/$POOL_NAME/*" \
  --role="roles/iam.workloadIdentityUser"

# Step 7: Secure Cloud Run service
echo ""
echo "7️⃣ Securing Cloud Run service..."
gcloud run services remove-iam-policy-binding $SERVICE_NAME \
  --region=$REGION \
  --member="allUsers" \
  --role="roles/run.invoker" 2>/dev/null || echo "Already secured"

# Get service URL
SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --region $REGION --format 'value(status.url)')

echo ""
echo "✅ Setup Complete!"
echo "=================="
echo ""
echo "📋 Configuration Summary:"
echo "- Workload Identity Pool: $POOL_ID"
echo "- Provider: $PROVIDER_ID"
echo "- Service Account: $SA_EMAIL"
echo "- Cloud Run URL: $SERVICE_URL"
echo ""
echo "📝 Next Steps in Azure Portal:"
echo ""
echo "1. Go to Azure Active Directory > App registrations"
echo "2. Create new registration (or update existing):"
echo "   - Name: Catalyst Newsletter"
echo "   - Supported account types: Your organization only"
echo ""
echo "3. Configure the app:"
echo "   - Application (client) ID should be: $CLIENT_ID"
echo "   - Directory (tenant) ID should be: $TENANT_ID"
echo "   - Add API permissions: openid, profile, email, User.Read"
echo ""
echo "4. Authentication settings:"
echo "   - Platform: Single-page application or Web"
echo "   - Redirect URI: Your app's callback URL"
echo ""
echo "5. Create credentials for your app to use:"
echo ""
echo "   To get an access token from your app:"
echo "   curl -X POST https://sts.googleapis.com/v1/token \\"
echo "     -d '{\"audience\": \"//iam.googleapis.com/$POOL_NAME/providers/$PROVIDER_ID\", "
echo "        \"grantType\": \"urn:ietf:params:oauth:grant-type:token-exchange\", "
echo "        \"requestedTokenType\": \"urn:ietf:params:oauth:token-type:access_token\", "
echo "        \"scope\": \"https://www.googleapis.com/auth/cloud-platform\", "
echo "        \"subjectTokenType\": \"urn:ietf:params:oauth:token-type:jwt\", "
echo "        \"subjectToken\": \"AZURE_ID_TOKEN\"}'"
echo ""
echo "6. Use the token to access Cloud Run:"
echo "   curl -H \"Authorization: Bearer ACCESS_TOKEN\" $SERVICE_URL"
echo ""
echo "📚 Documentation:"
echo "https://cloud.google.com/iam/docs/workload-identity-federation"