#!/bin/bash

# Setup Workforce Identity Federation with Microsoft Entra ID
# This script helps automate the GCP side of the federation setup

set -e

# Configuration
PROJECT_ID=${GCP_PROJECT_ID:-"newsletter-1757943207"}
POOL_ID=${WIF_POOL_ID:-"microsoft-entra-pool"}
POOL_DISPLAY_NAME="Microsoft Entra ID Federation"
PROVIDER_ID=${WIF_PROVIDER_ID:-"microsoft-entra"}
LOCATION="global"
ORGANIZATION_ID=${GCP_ORGANIZATION_ID:-"358771400658"}  # Leave empty if not in an organization

# Microsoft Entra configuration (update these)
TENANT_ID=${AZURE_TENANT_ID:-"d9a0f5c5-551a-4c74-b60d-6052ccc5256d"}
CLIENT_ID=${AZURE_CLIENT_ID:-"eff0e78f-446e-47a9-af65-829e10ac0690"}

echo "üîê Setting up Workforce Identity Federation with Microsoft Entra"
echo "Project ID: $PROJECT_ID"
echo "Pool ID: $POOL_ID"
echo "Provider ID: $PROVIDER_ID"
echo ""

# Set the project
gcloud config set project $PROJECT_ID

# Enable required APIs
echo "üì¶ Enabling required APIs..."
gcloud services enable iam.googleapis.com \
  iamcredentials.googleapis.com \
  sts.googleapis.com \
  cloudresourcemanager.googleapis.com \
  iap.googleapis.com

# Create Workforce Identity Pool
echo ""
echo "üèä Creating Workforce Identity Pool..."

# Check if we need organization flag
if [ -n "$ORGANIZATION_ID" ]; then
  ORG_FLAG="--organization=$ORGANIZATION_ID"
else
  # Try to get organization from project
  ORG_ID=$(gcloud organizations list --format="value(name)" 2>/dev/null | head -1 || echo "")
  if [ -n "$ORG_ID" ]; then
    ORG_FLAG="--organization=$ORG_ID"
    echo "Using organization: $ORG_ID"
  else
    # For projects without organization, we need to skip workforce pools
    echo "‚ö†Ô∏è  No organization found. Workforce Identity Pools require an organization."
    echo "Using alternative approach with Workload Identity Federation instead..."
    ORG_FLAG=""
  fi
fi

if [ -n "$ORG_FLAG" ]; then
  gcloud iam workforce-pools create $POOL_ID \
    --location=$LOCATION \
    --display-name="$POOL_DISPLAY_NAME" \
    --description="Federation with Microsoft Entra ID for authentication" \
    --session-duration=3600s \
    $ORG_FLAG \
    || echo "Pool already exists, continuing..."
else
  echo "Skipping Workforce Pool creation (requires organization)"
fi

# Get pool resource name
POOL_NAME="locations/$LOCATION/workforcePools/$POOL_ID"

# Create OIDC Provider for Microsoft Entra
echo ""
echo "üîó Creating OIDC Provider for Microsoft Entra..."
if [ -n "$ORG_FLAG" ]; then
  gcloud iam workforce-pools providers create-oidc $PROVIDER_ID \
    --location=$LOCATION \
    --workforce-pool=$POOL_ID \
    --issuer-uri="https://login.microsoftonline.com/$TENANT_ID/v2.0" \
    --client-id=$CLIENT_ID \
    --attribute-mapping="google.subject=assertion.sub,google.groups=assertion.groups,attribute.email=assertion.email,attribute.name=assertion.name" \
    --display-name="Microsoft Entra ID" \
    --description="Microsoft Entra ID OIDC provider" \
    --web-sso-response-type="code" \
    --web-sso-assertion-claims-behavior="merge-user-info-over-id-token-claims" \
    --web-sso-additional-scopes="openid,profile,email" \
    || echo "Provider already exists, continuing..."
else
  echo "Skipping OIDC Provider creation (requires Workforce Pool)"
fi

# Output the configuration
echo ""
echo "‚úÖ Workforce Identity Federation setup complete!"
echo ""
echo "üìã Next steps:"
echo ""
echo "1. In Azure Portal (Microsoft Entra ID):"
echo "   - Create or update App Registration"
echo "   - Set Application (client) ID to: $CLIENT_ID"
echo "   - Add redirect URI: https://auth.cloud.google.com/signin-callback/$POOL_ID"
echo "   - Configure API permissions (OpenID, profile, email)"
echo "   - Create client secret and save it securely"
echo ""
echo "2. Update this script with your actual Azure configuration:"
echo "   - AZURE_TENANT_ID: Your Azure tenant ID"
echo "   - AZURE_CLIENT_ID: Your Azure app client ID"
echo ""
echo "3. Grant Cloud Run access to federated users:"
echo "   Use this principal format for specific users:"
echo "   principal://iam.googleapis.com/$POOL_NAME/subject/{user-email}"
echo ""
echo "   Or for all authenticated users from your tenant:"
echo "   principalSet://iam.googleapis.com/$POOL_NAME/*"
echo ""
echo "4. Example command to grant access:"
echo "   gcloud run services add-iam-policy-binding catalyst-newsletter \\"
echo "     --region=europe-west1 \\"
echo "     --member='principalSet://iam.googleapis.com/$POOL_NAME/*' \\"
echo "     --role='roles/run.invoker'"
echo ""
echo "5. Test the authentication:"
echo "   - Access your Cloud Run service URL"
echo "   - You'll be redirected to Microsoft login"
echo "   - After successful authentication, you'll access the service"
echo ""
echo "Note: Cloud Run uses its built-in authentication, not IAP."
echo "The Workforce Identity Federation allows Microsoft Entra users"
echo "to authenticate and access the Cloud Run service directly."